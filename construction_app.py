from web3 import Web3
import json
import os

url = "HTTP://127.0.0.1:7545"
web3 = Web3(Web3.HTTPProvider(url))

user = int(input("Login to User [1-10]: "))-1
web3.eth.default_account = web3.eth.accounts[user]

abi = json.loads('''[
	{
		"constant": false,
		"inputs": [
			{
				"name": "_permitID",
				"type": "uint256"
			}
		],
		"name": "vote",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "permitCount",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_permitType",
				"type": "string"
			},
			{
				"name": "_authorityName",
				"type": "string"
			},
			{
				"name": "_authorityGroup",
				"type": "string"
			},
			{
				"name": "_location",
				"type": "string"
			},
			{
				"name": "_startDate",
				"type": "string"
			},
			{
				"name": "_endDate",
				"type": "string"
			}
		],
		"name": "addConstruction",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"name": "constructions",
		"outputs": [
			{
				"name": "permitID",
				"type": "uint256"
			},
			{
				"name": "permitType",
				"type": "string"
			},
			{
				"name": "authorityName",
				"type": "string"
			},
			{
				"name": "authorityGroup",
				"type": "string"
			},
			{
				"name": "location",
				"type": "string"
			},
			{
				"name": "startDate",
				"type": "string"
			},
			{
				"name": "endDate",
				"type": "string"
			},
			{
				"name": "votes",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "",
				"type": "address"
			}
		],
		"name": "votes",
		"outputs": [
			{
				"name": "",
				"type": "bool"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"anonymous": false,
		"inputs": [],
		"name": "Voted",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [],
		"name": "NewConstruction",
		"type": "event"
	}
]''')
bytecode = "608060405234801561001057600080fd5b506000600281905550610e2d806100286000396000f30060806040526004361061006d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630121b93f1461007257806356ee4cd01461009f57806361648c7e146100ca578063cb9deffc14610291578063d8bff5a514610561575b600080fd5b34801561007e57600080fd5b5061009d600480360381019080803590602001909291905050506105bc565b005b3480156100ab57600080fd5b506100b46107af565b6040518082815260200191505060405180910390f35b3480156100d657600080fd5b5061028f600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506107b5565b005b34801561029d57600080fd5b506102bc6004803603810190808035906020019092919050505061091e565b6040518089815260200180602001806020018060200180602001806020018060200188815260200187810387528e818151815260200191508051906020019080838360005b8381101561031c578082015181840152602081019050610301565b50505050905090810190601f1680156103495780820380516001836020036101000a031916815260200191505b5087810386528d818151815260200191508051906020019080838360005b83811015610382578082015181840152602081019050610367565b50505050905090810190601f1680156103af5780820380516001836020036101000a031916815260200191505b5087810385528c818151815260200191508051906020019080838360005b838110156103e85780820151818401526020810190506103cd565b50505050905090810190601f1680156104155780820380516001836020036101000a031916815260200191505b5087810384528b818151815260200191508051906020019080838360005b8381101561044e578082015181840152602081019050610433565b50505050905090810190601f16801561047b5780820380516001836020036101000a031916815260200191505b5087810383528a818151815260200191508051906020019080838360005b838110156104b4578082015181840152602081019050610499565b50505050905090810190601f1680156104e15780820380516001836020036101000a031916815260200191505b50878103825289818151815260200191508051906020019080838360005b8381101561051a5780820151818401526020810190506104ff565b50505050905090810190601f1680156105475780820380516001836020036101000a031916815260200191505b509e50505050505050505050505050505060405180910390f35b34801561056d57600080fd5b506105a2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610cf6565b604051808215151515815260200191505060405180910390f35b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561067e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f566f7465722068617320766f7465642e0000000000000000000000000000000081525060200191505060405180910390fd5b60008111801561069057506002548111155b1515610704576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f5065726d6974204944206973206f7574206f662072616e67652e00000000000081525060200191505060405180910390fd5b60018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600080828152602001908152602001600020600701600081548092919060010191905055507f650d798f3862ff92822acb5de11a760351b122df0cf4e24ef80b0a7ff82e0eb960405160405180910390a150565b60025481565b6107bd610d16565b6002600081548092919060010191905055506101006040519081016040528060025481526020018881526020018781526020018681526020018581526020018481526020018381526020016000815250905080600080600254815260200190815260200160002060008201518160000155602082015181600101908051906020019061084a929190610d5c565b506040820151816002019080519060200190610867929190610d5c565b506060820151816003019080519060200190610884929190610d5c565b5060808201518160040190805190602001906108a1929190610d5c565b5060a08201518160050190805190602001906108be929190610d5c565b5060c08201518160060190805190602001906108db929190610d5c565b5060e082015181600701559050507feff83c1d3291d229a94882c4d938bb7f7dbdcc4edb30dbcdc2fd6f1d3ce9f3f660405160405180910390a150505050505050565b6000602052806000526040600020600091509050806000015490806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109d05780601f106109a5576101008083540402835291602001916109d0565b820191906000526020600020905b8154815290600101906020018083116109b357829003601f168201915b505050505090806002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a6e5780601f10610a4357610100808354040283529160200191610a6e565b820191906000526020600020905b815481529060010190602001808311610a5157829003601f168201915b505050505090806003018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b0c5780601f10610ae157610100808354040283529160200191610b0c565b820191906000526020600020905b815481529060010190602001808311610aef57829003601f168201915b505050505090806004018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610baa5780601f10610b7f57610100808354040283529160200191610baa565b820191906000526020600020905b815481529060010190602001808311610b8d57829003601f168201915b505050505090806005018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c485780601f10610c1d57610100808354040283529160200191610c48565b820191906000526020600020905b815481529060010190602001808311610c2b57829003601f168201915b505050505090806006018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ce65780601f10610cbb57610100808354040283529160200191610ce6565b820191906000526020600020905b815481529060010190602001808311610cc957829003601f168201915b5050505050908060070154905088565b60016020528060005260406000206000915054906101000a900460ff1681565b6101006040519081016040528060008152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610d9d57805160ff1916838001178555610dcb565b82800160010185558215610dcb579182015b82811115610dca578251825591602001919060010190610daf565b5b509050610dd89190610ddc565b5090565b610dfe91905b80821115610dfa576000816000905550600101610de2565b5090565b905600a165627a7a723058207c08b5746360621054dfa59a2b7e2436e268af3c0844140132677f8267b8cc730029"

address = None
if (not os.path.exists('tmp.txt')):

    ## Create new contract
    Voter = web3.eth.contract(abi=abi, bytecode=bytecode)

    tx_hash = Voter.constructor().transact()

    tx_receipt = web3.eth.waitForTransactionReceipt(tx_hash)

    address=tx_receipt.contractAddress

    f = open("tmp.txt", "w")
    f.write(address)
    f.close()

    print("Created contract address: {}".format(address))
else:
    #Use existing contract
    f = open("tmp.txt", "r")
    address = f.read()
    f.close()

contract = web3.eth.contract(
    address=address,
    abi=abi,
)

while(True):
    print("===========User Summary==========")
    permit_count = contract.functions.permitCount().call()
    user_votes = contract.functions.votes(web3.eth.default_account).call()

    print("Construction Count: {} \nUser Votes: {}".format(permit_count, user_votes))
    print("=================================")
    print("============Construction Info===========")
    if (permit_count == 0):
        print("There is no construction")
    else:
        for i in range(1, permit_count+1):
            print("-------------------- {} --------------------".format(i))
            construction = contract.functions.constructions(i).call()
            print("Project ID: {}\nPermit Type: {}\nAuthority Name: {}\nAuthority Group: {}\nLocation: {}\nStart Date: {}\nEnd Date: {}".format(construction[0], construction[1], construction[2], construction[3], construction[4], construction[5], construction[6]))
            print("------------- # Votes: {} --------------------".format(construction[7]))
            print("---------------------------------------------------------------------")
    print("=================================")
    mode = input("Action [add/vote]: ")
    if (mode == "add"):
        permitType = str(input("Permit Type: "))
        authorityName = str(input("Authority Name: "))
        authorityGroup = str(input("Authority Group: "))
        location = str(input("Location: "))
        startDate = str(input("Start Date: "))
        endDate = str(input("End Date: "))
        tx_hash = contract.functions.addConstruction(permitType, authorityName,authorityGroup, location, startDate, endDate).transact()
        tx_receipt = web3.eth.waitForTransactionReceipt(tx_hash)
    elif (mode == "vote"):
        id = int(input("Permit ID: "))
        tx_hash = contract.functions.vote(id).transact()
        tx_receipt = web3.eth.waitForTransactionReceipt(tx_hash)
    else:
        print("Invalid action")
